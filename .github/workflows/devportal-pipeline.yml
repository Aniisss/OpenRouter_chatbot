name: DevSecOps Build and Test Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build -t devportal-app .

      - name: Run Unit Tests
        run: |
          docker run --rm devportal-app pytest tests/

  analyze:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety

      - name: Run Bandit (Security Analysis)
        run: bandit -r .

      - name: Run Safety (Dependency Vulnerability Scan)
        run: |
          if [ -f requirements.txt ]; then
            safety check --full-report
          else
            echo "No requirements.txt found; skipping safety check"
          fi

      - name: Build Docker image
        run: docker build -t devportal-app .

      - name: Run Hadolint (Dockerfile Best Practices)
        uses: hadolint/hadolint-action@v3.1.0

      - name: Run Trivy (Docker Security Scan)
        uses: aquasecurity/trivy-action@master
        env:
          TRIVY_DISABLE_VEX_NOTICE: 'true'
        with:
          image-ref: devportal-app:latest
          format: table
          exit-code: 0
          ignore-unfixed: true

      - name: Run GitLeaks (Secret Scanning)
        uses: gitleaks/gitleaks-action@v2

  sonar:
    needs: analyze
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java (Required for SonarQube)
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '17'

      - name: Install Sonar Scanner
        run: |
          wget -O sonarscanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip sonarscanner.zip
          echo "$PWD/sonar-scanner-5.0.1.3006-linux/bin" >> $GITHUB_PATH

      - name: Run SonarQube Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://4b7f-197-25-192-221.ngrok-free.app
        run: |
          sonar-scanner \
            -Dsonar.projectKey=devportal-app \
            -Dsonar.sources=. \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login=$SONAR_TOKEN

  dast:
    needs: sonar
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Run Docker container
        run: |
          docker build -t devportal-app .
          docker run -d -p 8000:8000 --name devportal-container devportal-app

      - name: Wait for service to start
        run: |
          for i in {1..30}; do
            curl -sSf http://localhost:8000 && break
            echo "Waiting for service..."
            sleep 5
          done

      - name: Run OWASP ZAP (DAST)
        uses: zaproxy/action-full-scan@v0.9.0
        with:
          target: http://localhost:8000

  sbom:
    needs: dast
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install CycloneDX for Python
        run: pip install cyclonedx-bom

      - name: Generate SBOM
        run: |
          ls -la
          if [ -f requirements.txt ]; then
            cyclonedx-py requirements -o bom.json
          else
            echo "No requirements.txt found; skipping SBOM generation"
          fi

      - name: Upload SBOM as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: bom.json

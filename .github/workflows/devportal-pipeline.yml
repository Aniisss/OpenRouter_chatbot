name: OpenRouter_chatbot Pipeline
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
env:
  ENV_KEYS: OPENROUTER_API_KEY SONAR_TOKEN
  OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
jobs:
  build-and-run:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build Docker image
        run: docker build -t devportal-app .
      - name: Run container in background
        run: |
          ENV_ARGS=""
          for key in $ENV_KEYS; do
            ENV_ARGS="$ENV_ARGS --env $key"
          done
          eval docker run -d -p 8000:8000 $ENV_ARGS --name devportal-test devportal-app
      - name: Wait for app to become responsive
        run: |
          for i in {1..30}; do
            curl -sSf http://localhost:8000/health && echo "App is responsive!" && exit 0
            echo "Waiting for app..."
            sleep 3
          done
          echo "App failed to respond after 30 attempts." >&2
          exit 1
      - name: Stop and remove container
        if: always()
        run: docker rm -f devportal-test
  analyze:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install Bandit
        run: |
          python -m pip install --upgrade pip
          pip install bandit
      - name: Run Bandit (Security Analysis)
        run: bandit -r . -f json -o bandit-report.json || echo "::warning::Bandit failed"
        continue-on-error: true
      - name: Upload Bandit report
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: bandit-report.json
      - name: Run Safety (Modern Scan)
      - uses: pyupio/safety-action@v1
        with:
          api-key: ${{ secrets.SAFETY_API_KEY }}
          args: scan --output json > safety-report.json
      - name: Upload Safety report
        uses: actions/upload-artifact@v4
        with:
          name: safety-report
          path: safety-report.json
      - name: Build Docker image
        run: docker build -t devportal-app .
      - name: Run Hadolint (Dockerfile Best Practices)
        run: hadolint Dockerfile -f json > hadolint-report.json || echo "::warning::Hadolint failed"
        continue-on-error: true
      - name: Upload Hadolint report
        uses: actions/upload-artifact@v4
        with:
          name: hadolint-report
          path: hadolint-report.json
      - name: Run Trivy (Docker Security Scan)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: devportal-app:latest
          format: json
          output: trivy-report.json
          ignore-unfixed: true
        continue-on-error: true
      - name: Upload Trivy report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.json
      - name: Run GitLeaks (Secret Scanning)
        uses: gitleaks/gitleaks-action@v2
        with:
          scan_args: "--report-format json --report-path gitleaks-report.json"
        continue-on-error: true
      - name: Upload GitLeaks report
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report
          path: gitleaks-report.json
  sonar:
    needs: analyze
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Java (Required for SonarQube)
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: "17"
      - name: Install Sonar Scanner
        run: |
          wget -O sonarscanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip sonarscanner.zip
          echo "$PWD/sonar-scanner-5.0.1.3006-linux/bin" >> $GITHUB_PATH
      - name: Run SonarQube Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: http://128.85.67.138:9000
        run: |
          sonar-scanner \
            -Dsonar.projectKey=devportal-app \
            -Dsonar.sources=. \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login=$SONAR_TOKEN
      - name: Download SonarQube Issues Report
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: http://128.85.67.138:9000
        run: |
          curl -s -u "$SONAR_TOKEN:" "$SONAR_HOST_URL/api/issues/search?componentKeys=devportal-app&ps=500" -o sonar-report.json
      - name: Upload SonarQube Report
        uses: actions/upload-artifact@v4
        with:
          name: sonar-report
          path: sonar-report.json
  dast:
    needs: sonar
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and Run Docker container
        run: |
          docker build -t devportal-app .
          docker network create zapnet || true
          docker run -d --network=zapnet -p 8080:8000 --name devportal-container devportal-app
      - name: Run OWASP ZAP (DAST)
        uses: zaproxy/action-full-scan@v0.9.0
        with:
          target: http://devportal-container:8000
          report-format: html
          output-path: zap-report.html
      - name: Upload ZAP report
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: zap-report.html
  sbom:
    needs: dast
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install CycloneDX for Python
        run: pip install cyclonedx-bom
      - name: Generate SBOM
        run: |
          ls -la
          if [ -f requirements.txt ]; then
            cyclonedx-py requirements -o bom.json
          else
            echo "No requirements.txt found; skipping SBOM"
          fi
      - name: Upload SBOM as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: bom.json

name: Full DevSecOps Pipeline (With SonarQube & Security)

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  analyze:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 bandit safety

      - name: Run Flake8 (Code Quality)
        run: flake8 --count --max-line-length=120 --statistics

      - name: Run Bandit (Security Analysis)
        run: bandit -r .

      - name: Run Safety (Dependency Vulnerability Scan)
        run: safety check --full-report

      - name: Run Hadolint (Dockerfile Best Practices)
        uses: hadolint/hadolint-action@v3.1.0

      - name: Run Trivy (Docker Security Scan)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "chatbot-app:latest"
          format: "table"
          exit-code: 1
          ignore-unfixed: true

      - name: Run GitLeaks (Secret Scanning)
        uses: gitleaks/gitleaks-action@v2

  sonar:
    runs-on: ubuntu-latest
    needs: analyze  # Runs only if previous step passes

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java (Required for SonarQube)
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install Sonar Scanner
        run: |
          wget -O sonarscanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip sonarscanner.zip
          export PATH=$PWD/sonar-scanner-5.0.1.3006-linux/bin:$PATH

      - name: Run SonarQube Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: "http://your-sonarqube-server:9000"
        run: |
          sonar-scanner \
            -Dsonar.projectKey=chatbot-app \
            -Dsonar.sources=. \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login=$SONAR_TOKEN

  dast:
    runs-on: ubuntu-latest
    needs: sonar  # Runs only after SonarQube analysis

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Run Docker container
        run: |
          docker build -t chatbot-app .
          docker run -d -p 8080:8000 --name chatbot-container chatbot-app

      - name: Wait for service to start
        run: sleep 20  # Attendre que l'application d√©marre correctement

      - name: Check running containers
        run: docker ps -a

      - name: Show application logs (debugging)
        run: docker logs chatbot-container

      - name: Run OWASP ZAP (DAST)
        uses: zaproxy/action-full-scan@v0.9.0
        with:
          target: "http://localhost:8080"

  sbom:
    runs-on: ubuntu-latest
    needs: dast  # Run after DAST scan

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate SBOM
        uses: CycloneDX/gh-action@v1
        with:
          format: json
          output: "bom.json"

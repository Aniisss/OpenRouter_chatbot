name: "OpenRouter_chatbot Pipeline"
"on":
  push:
    branches:
      - "master"
  pull_request:
    branches:
      - "master"
jobs:
  build-and-run:
    runs-on: "ubuntu-latest"
    steps:
      - name: "Checkout code"
        uses: "actions/checkout@v4"
      - name: "Set up Docker Buildx"
        uses: "docker/setup-buildx-action@v3"
      - name: "Build Docker image"
        run: "docker build -t devportal-app ."
      - name: "Run container in background"
        run: "ENV_ARGS=\"\"\nfor key in $ENV_KEYS; do\n  ENV_ARGS=\"$ENV_ARGS --env $key\"\ndone\neval docker run -d -p 8000:8000 $ENV_ARGS --name devportal-test devportal-app\n"
      - name: "Wait for app to become responsive"
        run: "for i in {1..30}; do\n  curl -sSf http://localhost:8000 && echo \"App is responsive!\" && exit 0\n  echo \"Waiting for app...\"\n  sleep 3\ndone\necho \"App failed to respond after 30 attempts.\" >&2\nexit 1\n"
      - name: "Stop and remove container"
        if: "always()"
        run: "docker rm -f devportal-test"
  analyze:
    runs-on: "ubuntu-latest"
    steps:
      - name: "Checkout repository"
        uses: "actions/checkout@v4"
      - name: "Set up Python"
        uses: "actions/setup-python@v4"
        with:
          python-version: "3.10"
      - name: "Install dependencies"
        run: "python -m pip install --upgrade pip\npip install bandit safety\n"
      - name: "Run Bandit (Security Analysis)"
        run: "bandit -r ."
      - name: "Run Safety (Dependency Vulnerability Scan)"
        run: "safety check --full-report"
      - name: "Build Docker image"
        run: "docker build -t devportal-app ."
      - name: "Run Hadolint (Dockerfile Best Practices)"
        uses: "hadolint/hadolint-action@v3.1.0"
      - name: "Run Trivy (Docker Security Scan)"
        uses: "aquasecurity/trivy-action@master"
        with:
          image-ref: "devportal-app:latest"
          format: "table"
          exit-code: 1
          ignore-unfixed: true
      - name: "Run GitLeaks (Secret Scanning)"
        uses: "gitleaks/gitleaks-action@v2"
  sonar:
    needs: "analyze"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Checkout repository"
        uses: "actions/checkout@v4"
      - name: "Set up Java (Required for SonarQube)"
        uses: "actions/setup-java@v3"
        with:
          distribution: "temurin"
          java-version: "17"
      - name: "Install Sonar Scanner"
        run: "wget -O sonarscanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip\nunzip sonarscanner.zip\necho \"$PWD/sonar-scanner-5.0.1.3006-linux/bin\" >> $GITHUB_PATH\n"
      - name: "Run SonarQube Analysis"
        env:
          SONAR_TOKEN: "${{ secrets.SONAR_TOKEN }}"
          SONAR_HOST_URL: "https://sonarqube.example.com"
        run: "sonar-scanner \\\n  -Dsonar.projectKey=devportal-app \\\n  -Dsonar.sources=. \\\n  -Dsonar.host.url=$SONAR_HOST_URL \\\n  -Dsonar.login=$SONAR_TOKEN\n"
  dast:
    needs: "sonar"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Checkout repository"
        uses: "actions/checkout@v4"
      - name: "Set up Docker Buildx"
        uses: "docker/setup-buildx-action@v3"
      - name: "Build and Run Docker container"
        run: "docker build -t devportal-app .\ndocker network create zapnet || true\ndocker run -d --network=zapnet -p 8080:8000 --name devportal-container devportal-app\n"
      - name: "Wait for app to become responsive"
        run: "for i in {1..30}; do\n  curl -sSf http://devportal-container:8000 && echo \"App is responsive!\" && exit 0\n  echo \"Waiting for app...\"\n  sleep 3\ndone\necho \"App failed to respond.\" >&2\nexit 1\n"
      - name: "Run OWASP ZAP (DAST)"
        uses: "zaproxy/action-full-scan@v0.9.0"
        with:
          target: "http://devportal-container:8000"
  sbom:
    needs: "dast"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Checkout repository"
        uses: "actions/checkout@v4"
      - name: "Set up Python"
        uses: "actions/setup-python@v4"
        with:
          python-version: "3.10"
      - name: "Install CycloneDX for Python"
        run: "pip install cyclonedx-bom"
      - name: "Generate SBOM"
        run: "ls -la\nif [ -f requirements.txt ]; then\n  cyclonedx-py requirements -o bom.json\nelse\n  echo \" No requirements.txt found; skipping SBOM\"\nfi\n"
      - name: "Upload SBOM as Artifact"
        uses: "actions/upload-artifact@v3"
        with:
          name: "sbom"
          path: "bom.json"
